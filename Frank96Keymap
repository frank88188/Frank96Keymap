#include QMK_KEYBOARD_H

#define _Default 0
#define _Select 1
#define _Cubase 2
#define _Protools 3
#define _Sibelius 4

enum custom_keycodes {
  M_FabfilterProQ2 = SAFE_RANGE,
  M_API550BStero,
  M_FabfilterProC2,
  M_VirtualMixRack,
  M_FabfilterProMB,
  M_FabfilterSaturn,
  M_Bounce,
  M_Caps
};

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
 
 [0] = LAYOUT(
    KC_ESC,  KC_F1,   KC_F2,   KC_F3,   KC_F4,   KC_F5,   KC_F6,   KC_F7,   KC_F8,   KC_F9,   KC_F10,  KC_F11,  KC_F12,  KC_PSCR, KC_DEL, KC_HOME,  KC_END, KC_PGUP, KC_PGDOWN,
    KC_GRV,  KC_1,    KC_2,    KC_3,    KC_4,    KC_5,    KC_6,    KC_7,    KC_8,    KC_9,    KC_0,    KC_MINS, KC_EQL,  KC_BSPC, KC_BSPC, KC_NLCK, KC_PSLS, KC_PAST, KC_PMNS,
    KC_TAB,  KC_Q,    KC_W,    KC_E,    KC_R,    KC_T,    KC_Y,    KC_U,    KC_I,    KC_O,    KC_P,    KC_LBRC, KC_RBRC, KC_BSLS,          KC_P7,   KC_P8,   KC_P9,   KC_PMNS,
   KC_CAPS, KC_A,    KC_S,    KC_D,    KC_F,    KC_G,    KC_H,    KC_J,    KC_K,    KC_L,    KC_SCLN, KC_QUOT, KC_ENT,                    KC_P4,   KC_P5,   KC_P6,   KC_PPLS,
    KC_LSFT, KC_NUBS, KC_Z,    KC_X,    KC_C,    KC_V,    KC_B,    KC_N,    KC_M,    KC_COMM, KC_DOT,  KC_SLSH, KC_RSFT,          KC_UP,   KC_P1,   KC_P2,   KC_P3,   KC_PENT,
    KC_LCTL, KC_LGUI, KC_LALT,                            KC_SPC,                             KC_RALT, MO(1),   MO(1),   KC_LEFT, KC_DOWN, KC_RGHT, KC_P0,   KC_PDOT, KC_PENT),

[1] = LAYOUT(
    _______,   _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______,
    _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______,
    _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, TG(3), _______, _______, _______,          _______, _______, _______, _______,
    _______, _______, TG(4), _______, _______, _______, _______, _______, _______, _______, _______, _______, _______,                   _______, _______, _______, _______,
    _______, _______, _______, _______, TG(2), _______, _______,  _______, _______, _______, _______, _______, _______,          _______, _______, _______, _______, _______,
    _______, _______, _______,                            _______,                            _______, _______, _______, _______, _______, _______, _______, _______, _______),

   [2] = LAYOUT(
    TO(0), LSFT(KC_1), LSFT(KC_2), LSFT(KC_3), LSFT(KC_4), LSFT(KC_5), LSFT(KC_6), LSFT(KC_7), _______, _______, _______, _______, LSFT(KC_0), _______, _______, _______, _______, _______, _______,
    _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______,
    _______, _______, _______, M_FabfilterProQ2, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______,
    _______, M_API550BStero, M_FabfilterSaturn, _______, _______, _______, _______, _______, _______, _______, _______, _______, M_Bounce, _______, _______, _______, _______,
    _______, _______, _______, _______, M_FabfilterProC2, M_VirtualMixRack, _______,  _______, M_FabfilterProMB, _______, _______, _______, _______, _______, _______, _______, _______, _______,
    _______, _______, _______,                            _______,                            _______, _______, _______, _______, _______, _______, _______, _______, _______),

 [3] = LAYOUT(
   TO(0),   _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______,
    _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______,
    _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______,          _______, _______, _______, _______,
    _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______,                   _______, _______, _______, _______,
    _______, _______, _______, _______, _______, _______, _______,  _______, _______, _______, _______, _______, _______,          _______, _______, _______, _______, _______,
    _______, _______, _______, _______,                            _______,                             _______, _______, _______, _______, _______, _______, _______, _______),

[4] = LAYOUT(
  TO(0), _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______,
  _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______,
  _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______,
  _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______,
  _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______,
  _______, _______, _______, _______, _______,                           _______,                             _______, _______, _______, _______, _______, _______, _______),

};

uint32_t layer_state_set_user(uint32_t state) {
  switch (biton32(state)) {

  case _Select:
    rgblight_setrgb(255, 255, 255);
    rgblight_mode(5);
    break;

  case _Cubase:
    rgblight_setrgb(255, 0, 0);
    rgblight_mode(1);
    break;

  case _Protools:
    rgblight_setrgb(255, 0, 255);
    rgblight_mode(1);

    break;

  case _Sibelius:
    rgblight_setrgb(128, 0, 128);
    rgblight_mode(1);

    break;

  case _Caps:
    rgblight_setrgb(225, 225, 225);
    rgblight_mode(1);

    break;

  default:
    rgblight_setrgb(0, 0, 0);
    rgblight_mode(1);

    break;
  }
  return state;
}
/*
void led_set(uint8_t usb_led)
{
  if (usb_led & (1 << USB_LED_CAPS_LOCK)) {
    MO(5)

  }
  else {

    rgblight_setrgb(0, 0, 0);

  }
}

*/



void led_set(uint8_t usb_led)
{

    if (usb_led & (1 << USB_LED_NUM_LOCK)) {
      rgblight_setrgb_at(255, 255, 255,10);
  }
  else {
      rgblight_setrgb_at(0, 0, 0, 10);
    }

    if (usb_led & (1 << USB_LED_CAPS_LOCK)) {
      rgblight_setrgb_at(255, 255, 255, 17);
    }
    else {
      rgblight_setrgb_at(0, 0, 0, 17);

    }

}

const macro_t *action_get_macro(keyrecord_t *record, uint8_t id, uint8_t opt) {
  
  return MACRO_NONE;
};

bool process_record_user(uint16_t keycode, keyrecord_t *record) {

  switch (keycode) {

  case M_FabfilterProQ2:
    if (record->event.pressed) {
      SEND_STRING("FabFilter Pro-Q 2"SS_TAP(X_ENTER));
    }
    else {
    }
    break;

  case M_API550BStero:
    if (record->event.pressed) {
      SEND_STRING("API-550B Stereo"SS_TAP(X_ENTER));
    }
    else {
    }
    break;

  case M_FabfilterProC2:
    if (record->event.pressed) {
      SEND_STRING("FabFilter Pro-C 2"SS_TAP(X_ENTER));
    }
    else {
    }
    break;

  case M_VirtualMixRack:
    if (record->event.pressed) {
      SEND_STRING("Virtual Mix Rack"SS_TAP(X_ENTER));
    }
    else {
    }
    break;

  case M_FabfilterProMB:
    if (record->event.pressed) {
      SEND_STRING("FabFilter Pro-MB"SS_TAP(X_ENTER));
    }
    else {
    }
    break;

  case M_FabfilterSaturn:
    if (record->event.pressed) {
      SEND_STRING("FabFilter Saturn"SS_TAP(X_ENTER));
    }
    else {
    }
    break;

  case M_Bounce:
    if (record->event.pressed) {
      SEND_STRING(SS_DOWN(X_LALT)SS_DOWN(X_LSHIFT)"E"SS_UP(X_LALT)SS_UP(X_LSHIFT));
    }
    else {
    }
    break;

  }
  return true;
};
